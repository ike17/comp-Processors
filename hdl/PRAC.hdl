CHIP FThree {
    IN A, B, C, D;
    OUT E, F, G;

    PARTS:
    // Negate A, B, C, D
    Not(in=A, out=nota);
    Not(in=B, out=notb);
    Not(in=C, out=notc);
    Not(in=D, out=notd);

    // A and B
    And(a=nota , b=notb , out=NotANotB);
    And(a=nota , b=B , out=NotAB);
    And(a=A , b=notb , out=ANotB);
    And(a=A , b=B , out=AB);

    // C and D
    And(a=notc , b=notd , out=NotCNotD);
    And(a=notc , b=D , out=NotCD);
    And(a=C , b=notd , out=CNotD);
    And(a=C , b=D , out=CD);

    // E
    
    And(a=NotAB , b=CD , out=e1);
    And(a=ANotB , b=CNotD , out=e2);
    And(a=ANotB , b=CD , out=e3);
    And(a=AB , b=NotCD , out=e4);
    And(a=AB , b=CNotD , out=e5);
    And(a=AB , b=CD , out=e6);

    Or(a=e1 , b=e2 , out=e12);
    Or(a=e3 , b=e4 , out=e34);
    Or(a=e5 , b=e6 , out=e56);

    Or(a=e12 , b=e34 , out=e1234);
    Or(a=e1234 , b=e56 , out=E);


    // F

    And(a=NotANotB , b=CNotD , out=f1);
    And(a=NotANotB , b=CD , out=f2);
    And(a=NotAB , b=NotCD , out=f3);
    And(a=NotAB , b=CNotD , out=f4);
    And(a=ANotB , b=NotCNotD , out=f5);
    And(a=ANotB , b=NotCD , out=f6);
    And(a=AB , b=NotCNotD , out=f7);
    And(a=AB , b=CD , out=f8);

    Or(a=f1 , b=f2 , out=f12);
    Or(a=f3 , b=f4 , out=f34);
    Or(a=f5 , b=f6 , out=f56);
    Or(a=f7 , b=f8 , out=f78);

    Or(a=f12 , b=f34 , out=f1234);
    Or(a=f56 , b=f78 , out=f5678);

    Or(a=f1234 , b=f5678 , out=F);


    // G
    Xor(a=B, b=D, out=G);
}